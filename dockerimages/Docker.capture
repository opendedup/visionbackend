FROM ubuntu:18.04

MAINTAINER Sam Silverberg sam.silverberg@gmail.com

ENV TZ=America/Los_Angeles
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Install some dependencies
RUN apt update && apt upgrade -y && apt install -y \
		bc \
		build-essential \
		cmake \
		curl \
		g++ \
		gfortran \
		git \
		libffi-dev \
		libfreetype6-dev \
		libhdf5-dev \
		libjpeg-dev \
		liblcms2-dev \
		libopenblas-dev \
		liblapack-dev \
		libssl-dev \
		libtiff5-dev \
		libwebp-dev \
		libzmq3-dev \
		nano \
		pkg-config \
		software-properties-common \
		unzip \
		vim \
		wget \
		zlib1g-dev \
		qt5-default \
		libvtk6-dev \
		zlib1g-dev \
		libjpeg-dev \
		libwebp-dev \
		libpng-dev \
		libtiff5-dev \
		libopenexr-dev \
		libgdal-dev \
		libdc1394-22-dev \
		libavcodec-dev \
		libavformat-dev \
		libswscale-dev \
		libtheora-dev \
		libvorbis-dev \
		libxvidcore-dev \
		libx264-dev \
		yasm \
		libopencore-amrnb-dev \
		libopencore-amrwb-dev \
		libv4l-dev \
		libxine2-dev \
		libtbb-dev \
		libeigen3-dev \
		python3-dev \
		python3-tk \
		python3-numpy \
		ant \
		default-jdk \
		doxygen \
		libzbar0 \
		g++ \
		autoconf \
		automake \
		libtool \
		pkg-config \
		libpng-dev \
		libjpeg8-dev \
		libtiff5-dev \
		zlib1g-dev \
		libleptonica-dev \
		libzbar-dev \
		&& \
	apt-get clean && \
	apt-get autoremove && \
	rm -rf /var/lib/apt/lists/*
RUN rm -rf /usr/bin/python
RUN ln -s /usr/bin/python3 /usr/bin/python
# Install pip
RUN curl -O https://bootstrap.pypa.io/get-pip.py && \
	python3 get-pip.py && \
	rm get-pip.py

RUN pip --no-cache-dir install \
		pyopenssl \
		ndg-httpsclient \
		pyasn1 \
    numpy \
    scipy \
    matplotlib \
    pandas \
    sympy \
    nose \
    Flask \
    opencv-python \
    uuid \
    flask_jwt_extended \
    boto3 \
    Cython \
    contextlib2 \
    pillow \
		google-cloud-storage \
		oauth2client \
		google-cloud-logging \
		google-api-python-client \
    lxml \
    grpcio-tools \
    tensorflow-serving-api \
		flask-restplus \
		requests \
		v4l2 \
		imutils \
		pyzbar \
		readerwriterlock \
		zbar-py \
		flask-cors


#Patch v4l2 for python3
COPY dockerimages/pippatches/v4l2.py /usr/local/lib/python3.6/dist-packages/v4l2.py


#Install protobuf 2.6
RUN wget https://github.com/protocolbuffers/protobuf/releases/download/v3.6.1/protobuf-all-3.6.1.tar.gz && \
		tar -xzvf protobuf-all-3.6.1.tar.gz && \
		rm protobuf-all-3.6.1.tar.gz && \
		cd protobuf-3.6.1 && \
		./configure && \
		make -j4 && \
		make check && \
		make install && \
		ldconfig
WORKDIR "/"
RUN rm -rf protobuf-3.6.1

WORKDIR "/svbackend"
#Compile object detection models
RUN git clone https://github.com/flexiblevision/models.git && \
	cd models/research/ && \
	protoc object_detection/protos/*.proto --python_out=.

WORKDIR "/svbackend"

RUN git clone https://github.com/cocodataset/cocoapi.git && \
cd cocoapi/PythonAPI && \
make && \
cp -r pycocotools /svbackend/models/research/

#Install tesseract
WORKDIR /tmp
RUN git clone https://github.com/tesseract-ocr/tesseract.git
WORKDIR /tmp/tesseract
RUN ./autogen.sh && \
	./autogen.sh && \
	./configure --prefix=/usr && \
	make && \
	make install
WORKDIR /tmp
RUN rm -rf /tmp/tesseract
#Install English dict
WORKDIR /usr/share/tesseract
RUN wget https://github.com/tesseract-ocr/tessdata/raw/4.00/eng.traineddata && \
	wget https://github.com/tesseract-ocr/tessdata_fast/blob/master/eng.traineddata

RUN pip --no-cache-dir install pytesseract

ENV TESSDATA_PREFIX=/usr/share/tesseract

COPY webserver/logging.config /svbackend/
COPY webserver/flaskr /svbackend/webapp
COPY webserver/logging.config /svbackend/
ENV FLASK_APP=webapp
ENV FLASK_ENV=production
ENV LC_ALL=C.UTF-8
ENV LANG=C.UTF-8
ENV PYTHONPATH=/svbackend/webapp/:/svbackend/models/research/:/svbackend/models/research/slim/

EXPOSE 5000

WORKDIR "/svbackend"
CMD ["flask","run","--host=0.0.0.0"]
